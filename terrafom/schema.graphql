input CreateUserInput {
	name: String
	dob: AWSDate
	address: String
	description: String
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
}

input DeleteUserInput {
	id: ID!
}

type Mutation {
	createUser(input: CreateUserInput!): User
	updateUser(input: UpdateUserInput!): User
	deleteUser(input: DeleteUserInput!): User
}

type Query {
	getUser(id: ID!): User
	listUser(limit: Int!, nextToken: String, filter: TableUserFilterInput): UserConnection
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input TableUserFilterInput {
	id: TableIDFilterInput
	name: TableStringFilterInput
	dob: TableStringFilterInput
	address: TableStringFilterInput
	description: TableStringFilterInput
	createdAt: TableStringFilterInput
	updatedAt: TableStringFilterInput
}

input UpdateUserInput {
	id: ID!
	name: String
	dob: AWSDate
	address: String
	description: String
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
}

type User {
	id: ID!
	name: String
	dob: AWSDate
	address: String
	description: String
	createdAt: AWSDateTime
	updatedAt: AWSDateTime
}

type UserConnection {
	items: [User]
	nextToken: String
}